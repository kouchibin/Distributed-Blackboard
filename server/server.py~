# coding=utf-8
# ------------------------------------------------------------------------------------------------------
# TDA596 - Lab 1
# server/server.py
# Input: Node_ID total_number_of_ID
# Student: John Doe
# ------------------------------------------------------------------------------------------------------
import traceback
import sys
import time
import json
import argparse
import random
from threading import Thread

from bottle import Bottle, run, request, template, response
import requests
# ------------------------------------------------------------------------------------------------------
try:
    app = Bottle()

    board = {}
    
    current_sequence_number = 0

    leader_id = None
    self_id = None

    
    # ------------------------------------------------------------------------------------------------------
    # BOARD FUNCTIONS
    # Should nopt be given to the student
    # ------------------------------------------------------------------------------------------------------
    def add_new_element_to_store(entry_sequence, element, is_propagated_call=False):
        global board, node_id
        success = False
        try:
            board[entry_sequence] = element
            success = True
        except Exception as e:
            print e
        return success

    def modify_element_in_store(entry_sequence, modified_element, is_propagated_call = False):
        global board, node_id
        success = False
        try:
            board[entry_sequence] = modified_element
            success = True
        except Exception as e:
            print e
        return success

    def delete_element_from_store(entry_sequence, is_propagated_call = False):
        global board, node_id
        success = False
        try:
            del board[entry_sequence]
            success = True
        except Exception as e:
            print e
        return success

    # ------------------------------------------------------------------------------------------------------
    # DISTRIBUTED COMMUNICATIONS FUNCTIONS
    # should be given to the students?
    # ------------------------------------------------------------------------------------------------------
    def contact_vessel(vessel_ip, path, payload=None, req='POST'):
        # Try to contact another server (vessel) through a POST or GET, once
        success = False
        try:
            if 'POST' in req:
                res = requests.post('http://{}{}'.format(vessel_ip, path), data=payload)
            elif 'GET' in req:
                res = requests.get('http://{}{}'.format(vessel_ip, path))
            else:
                print 'Non implemented feature!'
            # result is in res.text or res.json()
            print(res.text)
            if res.status_code == 200:
                success = True
        except Exception as e:
            print e
        return success

    def propagate_to_vessels(path, payload = None, req = 'POST'):
        global vessel_list, node_id

        for vessel_id, vessel_ip in vessel_list.items():
            if int(vessel_id) != node_id: # don't propagate to yourself
                success = contact_vessel(vessel_ip, path, payload, req)
                if not success:
                    print "\n\nCould not contact vessel {}\n\n".format(vessel_id)


    # ------------------------------------------------------------------------------------------------------
    # ROUTES
    # ------------------------------------------------------------------------------------------------------
    # a single example (index) should be done for get, and one for post
    # ------------------------------------------------------------------------------------------------------
    @app.route('/')
    def index():
        global board, node_id
        return template('server/index.tpl', board_title='Vessel {}'.format(node_id), board_dict=sorted(board.iteritems()), members_name_string='Oskar Lundstr√∂m and Kou Chibin')

    @app.get('/board')
    def get_board():
        global board, node_id
        print board
        return template('server/boardcontents_template.tpl',board_title='Vessel {}'.format(node_id), board_dict=sorted(board.iteritems()))
    # ------------------------------------------------------------------------------------------------------
    @app.post('/board')
    def client_add_received():
        '''Adds a new element to the board
        Called directly when a user is doing a POST request on /board'''
        global board, node_id, current_sequence_number
        try:
            new_entry = request.forms.get('entry')
            entry_id = current_sequence_number
            add_new_element_to_store(entry_id, new_entry) 
            current_sequence_number += 1
            # you should propagate something
            # Please use threads to avoid blocking
            #thread = Thread(target=???,args=???)
            # you should create the thread as a deamon
            data = {}
            data['entry'] = new_entry
            thread = Thread(target=propagate_to_vessels, args=('/propagate/add/'+ str(entry_id), data))
            thread.daemon = True
            thread.start()
            return True
        except Exception as e:
            print e
        return False

    @app.post('/board/<element_id:int>/')
    def client_action_received(element_id):
        global board
        
        try:
          action = int(request.forms.get('delete'))
          # The entry should be modifed
          if action == 0:
            new_entry = request.forms.get('entry') 
            modify_element_in_store(element_id, new_entry)
            data = {}
            data['entry'] = new_entry
            thread = Thread(target=propagate_to_vessels, args=('/propagate/modify/'+str(element_id), data))
            thread.daemon = True
            thread.start()
          # The entry should be deleted
          elif action == 1:
            delete_element_from_store(element_id)
            thread = Thread(target=propagate_to_vessels, args=('/propagate/delete/'+str(element_id), None))
            thread.daemon = True
            thread.start()
          else:
            print 'UNSUPPORTED ACTION!!!'
          
          return True
          
        except Exception as e:
          print e
        return False 
        
    @app.post('/propagate/<action>/<element_id:int>')
    def propagation_received(action, element_id):
        global current_sequence_number
        # todo
        if action == 'add':
            entry = request.forms.get('entry')
            add_new_element_to_store(element_id, entry)
            # Adjusts the current sequence number to prevent overwrites
            current_sequence_number = element_id + 1
        elif action == 'modify':
            new_entry = request.forms.get('entry')
            modify_element_in_store(element_id, new_entry)
        elif action == 'delete':
            delete_element_from_store(element_id)
            
        return True
    
    @app.post('/leader/<action>')
    def leader(action):
        # A list of ids is distributed
        global node_id, leader_id, self_id, id_list
        if action == 'id_list':
            id_list = request.forms.get('id_list')
            print 'id_list: ' + id_list
            id_list = id_list.split(',')
            id_list = [str(x) for x in id_list]
            if node_id in id_list:
                # The message travels for a entire round
                leader_id = max(id_list)
            if leader_id == _id:
                # behave like leader
                pass
            id_list.append(self_id)
            
        # The leader id is distributed
        elif action == 'leader_id':
            pass
            
    
    def send_to_next(payload):
        next_id = node_id + 1
        if node_id == (n_nodes - 1):
            next_id = 1
        path = '/leader/id_list'
        requests.post('http://10.1.0.{}{}'.format(str(next_id), path), data=payload)
    
    def leader_election(self_id, n_nodes):
        global leader_id, id_list, node_id
        time.sleep(3)
        send_to_next({'id_list': '123'})
        while True:
            pass
            
        
    
    # ------------------------------------------------------------------------------------------------------
    # EXECUTION
    # ------------------------------------------------------------------------------------------------------
    # a single example (index) should be done for get, and one for postGive it to the    students-----------------------------------------------------------------------------------------------------
    # Execute the code
    def main():
        global vessel_list, node_id, app, self_id

        port = 80
        parser = argparse.ArgumentParser(description='Your own implementation of the distributed blackboard')
        parser.add_argument('--id', nargs='?', dest='nid', default=1, type=int, help='This server ID')
        parser.add_argument('--vessels', nargs='?', dest='nbv', default=1, type=int, help='The total number of vessels present in the system')
        args = parser.parse_args()
        node_id = args.nid
        vessel_list = dict()
        # We need to write the other vessels IP, based on the knowledge of their number
        for i in range(1, args.nbv):
            vessel_list[str(i)] = '10.1.0.{}'.format(str(i))

        self_id = random.randint(1, 2000)
        t = Thread(target=leader_election, args=(self_id, args.nbv))
        t.daemon = True
        t.start()
        
        try:
            run(app, host=vessel_list[str(node_id)], port=port)
        except Exception as e:
            print e
    # ------------------------------------------------------------------------------------------------------
    if __name__ == '__main__':
        main()
except Exception as e:
        traceback.print_exc()
        while True:
            time.sleep(60.)

